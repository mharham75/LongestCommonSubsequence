Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.

Input:
First line of the input contains no of test cases  T,the T test cases follow.
Each test case consist of 2 space separated integers A and B denoting the size of string str1 and str2 respectively
The next two lines contains the 2 string str1 and str2 .

Output:
For each test case print the length of longest  common subsequence of the two strings .

Constraints:
1<=T<=200
1<=size(str1),size(str2)<=100

Example:
Input:
2
6 6
ABCDGH
AEDFHR
3 2
ABC
AC

Output:
3
2

Explanation
LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.

LCS of "ABC" and "AC" is "AC" of length 2


/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for(int x=0; x<t; x++)
		{
		    int m = sc.nextInt();
		    int n = sc.nextInt();
		    
		    sc.nextLine();
		    String s1 = sc.nextLine();
		    String s2 = sc.nextLine();
		    
		    int res[][] = new int[m+1][n+1];
		    
		    for(int i=0; i<=m; i++)
		    {
		        for(int j=0; j<=n; j++)
		        {
		            if(i==0 || j==0)
		                res[i][j] = 0;
		                
		            else if(s1.charAt(i-1)==s2.charAt(j-1))
		                res[i][j] = 1+res[i-1][j-1];
		                
		            else
		                res[i][j] = Math.max(res[i-1][j],res[i][j-1]);
		        }
		    }
		    
		    System.out.println(res[m][n]);
		    
		
		}
		
	}
}
